The Effective Engineer: How to Leverage Your Efforts in Software Engineering to Make a Disproportionate and Meaningful Impact (Edmond Lau)
- Your Highlight on page 72 | location 963-964 | Added on Friday, 25 August 2017 20:32:37

as most companies grow, they slow down too much because they’re more afraid of making mistakes than they are of losing opportunities by moving too slowly … [I]f you never break anything, you’re probably not moving fast enough.”
==========
Clean Architecture: A Craftsman's Guide to Software Structure and Design, 1/e (Robert C. Martin)
- Your Highlight on page 58 | Location 880-881 | Added on Sunday, February 11, 2018 10:36:33 PM

Programmers are hired to make machines behave in a way that makes or saves money for the stakeholders.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 1821-1823 | Added on Saturday, March 2, 2019 9:24:19 PM

La historia es algo que ha hecho muy poca gente mientras que todos los demás araban los campos y acarreaban barreños de agua.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 2636-2638 | Added on Saturday, March 2, 2019 10:41:59 PM

La boca, por ejemplo, apareció porque los primitivos organismos pluricelulares necesitaban una manera de incorporar nutrientes a su cuerpo. Todavía usamos la boca para este propósito, pero también la empleamos para besar, hablar y, si somos Rambo, para extraer la anilla de las granadas de mano.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 3503-3505 | Added on Sunday, March 3, 2019 12:00:20 AM

En la actualidad, muchos norteamericanos sostienen que su gobierno tiene el imperativo moral de llevar a los países del Tercer Mundo los beneficios de la democracia y de los derechos humanos, aunque estos sean repartidos mediante misiles de crucero y F-16.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 4412-4413 | Added on Monday, March 18, 2019 9:33:47 AM

Ningún concepto, idea o teoría son sagrados ni se hallan libres de ser puestos en entredicho.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 5062-5078 | Added on Tuesday, March 19, 2019 11:16:14 PM

Un día, mientras efectuaban actividades de adiestramiento, los astronautas se encontraron con un anciano americano nativo. El hombre les preguntó qué hacían allí. Le contestaron que formaban parte de una expedición de investigación que muy pronto viajaría para explorar la Luna. Cuando el anciano oyó esto, quedó en silencio por unos momentos, y después les pidió a los astronautas si le podrían hacer un favor. —¿Qué quiere usted? —le preguntaron. —Bueno —dijo el anciano—, la gente de mi tribu cree que en la Luna viven espíritus sagrados. Me preguntaba si ustedes les podrían transmitir un mensaje importante para ellos de parte de mi pueblo. —¿Cuál es el mensaje? —preguntaron los astronautas. El hombre pronunció algo en su lenguaje tribal, y después les pidió a los astronautas que lo repitieran una y otra vez hasta que lo memorizaron correctamente. —¿Qué significa? —preguntaron los astronautas. —¡Oh!, no puedo decírselo. Es un secreto que solo nuestra tribu y los espíritus de la Luna pueden conocer. Cuando volvieron a su base, los astronautas buscaron y buscaron hasta que encontraron a alguien que podía hablar el lenguaje tribal, y le pidieron que tradujera el mensaje secreto. Al repetir lo que habían aprendido de memoria, el traductor empezó a reírse ruidosamente. Tras calmarse, los astronautas le preguntaron qué quería decir. El hombre les explicó que la frase que habían aprendido de memoria con tanto cuidado decía: «No os creáis ni una palabra de lo que esta gente os diga. Han venido para robaros vuestras tierras».
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 5428-5452 | Added on Wednesday, March 20, 2019 2:00:08 PM

La economía es un asunto notoriamente complicado. Para hacer las cosas más fáciles, imaginemos un ejemplo sencillo. Samuel Avaro, un astuto financiero, funda un banco en El Dorado, California. A. A. Marrullero, un constructor con futuro en El Dorado, termina su primer trabajo de envergadura, y recibe el pago en metálico por la cantidad de 1 millón de dólares. Deposita esta suma en el banco del señor Avaro. Ahora el banco dispone de 1 millón de dólares en capital. Mientras tanto, Juana Rosquilla, una cocinera experimentada pero pobre, piensa que existe una oportunidad de negocio: en su parte de la ciudad no hay una panadería y pastelería realmente buena. Pero no tiene suficiente dinero propio para comprar una instalación completa con hornos industriales, fregaderos, cuchillos y cacerolas. Se dirige al banco, presenta su plan de negocio a Avaro y lo persuade de que se trata de una inversión que vale la pena. Este le concede un préstamo de 1 millón de dólares, acreditando dicha suma en la cuenta bancaria de Rosquilla. Juana contrata ahora a Marrullero, el constructor, para que construya y amueble su pastelería. Su precio es de 1 millón de dólares. Cuando ella le paga, con un cheque contra su cuenta, Marrullero lo deposita en su cuenta en el banco de Avaro. De modo que ¿cuánto dinero tiene Marrullero en su cuenta bancaria? Correcto, 2 millones de dólares. ¿Cuánto dinero en efectivo tiene en su caja fuerte del banco? Correcto, 1 millón de dólares. La cosa no termina aquí. Como suelen hacer los constructores, a los dos meses de empezar las obras, Marrullero informa a Rosquilla de que, debido a problemas y gastos imprevistos, la factura por la construcción de la panadería y pastelería subirá en realidad a 2 millones de dólares. La señora Rosquilla no está en absoluto contenta, pero no puede detener las obras a medio terminar. De manera que efectúa otra visita al banco, convence al señor Avaro para que le conceda un préstamo adicional, y el banquero deposita otro millón de dólares en la cuenta de la cocinera. Esta transfiere el dinero a la cuenta del constructor. ¿Cuánto dinero tiene ahora Marrullero en su cuenta bancaria? Ha conseguido 3 millones de dólares. Pero ¿cuánto dinero hay realmente depositado en el banco? Sigue habiendo solo 1 millón de dólares. En realidad, el mismo millón de dólares que ha estado todo el tiempo en el banco. Las leyes bancarias estadounidenses actuales permiten que el banco repita este ejercicio otras siete veces. El constructor tendría al final 10 millones de dólares en su cuenta, aunque el banco sigue sin tener más que 1 millón de dólares en su cámara acorazada. A los bancos se les permite prestar diez dólares por cada dólar que posean realmente, lo que significa que el 90 por ciento de todo el dinero de nuestras cuentas bancarias no está cubierto por monedas y billetes reales.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 5596-5603 | Added on Wednesday, March 20, 2019 2:14:48 PM

Durante los últimos años, bancos y gobiernos han estado imprimiendo dinero de manera frenética. Todo el mundo está aterrorizado ante la posibilidad de que la crisis económica actual pueda detener el crecimiento de la economía. De modo que están creando de la nada billones de dólares, euros y yenes, inyectando crédito barato en el sistema, y esperando que científicos, técnicos e ingenieros consigan dar con algo realmente grande antes de que estalle la burbuja. Todo depende de la gente que hay en los laboratorios. Nuevos descubrimientos en campos como la biotecnología y la inteligencia artificial podrían crear industrias totalmente nuevas, cuyos beneficios podrían respaldar los billones de dinero de mentirijillas que bancos y gobiernos han creado desde 2008. Si los laboratorios no cumplen dichas expectativas antes de que la burbuja estalle, nos encaminamos a tiempos realmente duros.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 5619-5620 | Added on Wednesday, March 20, 2019 2:18:33 PM

Los imperios construidos por banqueros y comerciantes vestidos con levitas y sombreros de copa vencieron a los imperios construidos por reyes y nobles vestidos de oro y relucientes armaduras.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 5793-5806 | Added on Wednesday, March 20, 2019 4:49:27 PM

El ejemplo más notorio de cómo los gobiernos cumplieron el mandato del gran dinero fue la primera guerra del opio, que se libró entre Gran Bretaña y China (1840-1842). En la primera mitad del siglo XIX, la Compañía Británica de las Indias Orientales y diversos hombres de negocios ingleses amasaron fortunas mediante la exportación de drogas, principalmente opio, a China. Millones de chinos se convirtieron en adictos, lo que debilitó al país tanto económica como socialmente. A finales de la década de 1830, el gobierno chino promulgó una prohibición del tráfico de drogas, pero los comerciantes ingleses de las drogas simplemente ignoraron la ley. Las autoridades chinas empezaron a confiscar y a destruir los cargamentos de drogas. Los monopolios de las drogas tenían estrechas conexiones en Westminster y Downing Street (de hecho, muchos miembros del Parlamento y ministros del gabinete poseían acciones de las compañías de drogas), de modo que presionaron al gobierno para que actuara. En 1840, Gran Bretaña declaró puntualmente la guerra a China en nombre del «libre comercio». Fue un triunfo fácil. Los chinos, demasiado confiados, no eran rival para las nuevas y poderosas armas de Gran Bretaña: buques de vapor, artillería pesada, cohetes y rifles de repetición. Según el tratado de paz subsiguiente, China aceptaba no limitar las actividades de los comerciantes de drogas ingleses y compensarlos por los daños infligidos por la policía china. Además, los ingleses reclamaron y obtuvieron el control de Hong Kong, que a continuación usaron como base segura para el tráfico de drogas (Hong Kong siguió en manos inglesas hasta 1997). A finales del siglo XIX, unos 40 millones de chinos, la décima parte de la población del país, eran adictos al opio.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 5815-5825 | Added on Wednesday, March 20, 2019 4:49:50 PM

En 1821, los griegos se rebelaron contra el Imperio otomano. El levantamiento despertó una gran simpatía en los círculos liberales y románticos de Gran Bretaña; lord Byron, el poeta, fue incluso a Grecia para luchar junto a los insurgentes. Sin embargo, los financieros de Londres vieron asimismo una oportunidad. Propusieron a los jefes rebeldes emitir bonos de la rebelión griega, negociables, en el mercado de valores de Londres. Los griegos tenían que prometer devolver el importe de los bonos, más los intereses, siempre y cuando obtuvieran la independencia. Los inversores privados compraron bonos para obtener un beneficio, o porque simpatizaban con la causa griega, o por ambas razones. El valor de los bonos de la rebelión griega subía y bajaba en la Bolsa de Londres según los éxitos y fracasos militares en los campos de batalla de la Hélade. Gradualmente, los turcos consiguieron ventaja. Con una derrota inminente de los rebeldes, los accionistas se enfrentaban a la posibilidad de perderlo todo. El interés de los accionistas era el interés nacional, de manera que los ingleses organizaron una flota internacional que, en 1827, hundió a la flotilla otomana en la batalla de Navarino. Después de siglos de dominación, Grecia se hallaba libre al fin. Pero la libertad vino acompañada de una deuda enorme que el nuevo país no tenía manera de devolver. La economía griega quedó hipotecada a los inversores ingleses durante décadas.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 5879-5894 | Added on Wednesday, March 20, 2019 4:58:02 PM

En la Edad Media, el azúcar era un lujo raro en Europa. Se importaba de Oriente Próximo a precios prohibitivos y se usaba frugalmente como ingrediente secreto en golosinas y medicamentos de aceite de serpiente. Una vez que se hubieron establecido grandes plantaciones de caña de azúcar en América, a Europa empezaron a llegar cantidades crecientes de azúcar. El precio del azúcar bajó y Europa desarrolló un insaciable gusto por los dulces. Los emprendedores satisficieron dicha necesidad al producir cantidades enormes de dulces: pasteles, galletas, chocolate, caramelos y bebidas azucaradas como cacao, café y té. La ingesta anual de azúcar del ciudadano inglés medio pasó de casi cero a principios del siglo XVII a unos ocho kilogramos a principios del XIX. Sin embargo, cultivar la caña y extraer su azúcar era una empresa que requería trabajo intensivo. Pocas personas querían trabajar largas horas en campos de caña infestados de malaria bajo un sol tropical. Los trabajadores contratados habrían producido un bien demasiado caro para el consumo de masas. Sensibles a las fuerzas del mercado, y codiciosos de obtener beneficios y crecimiento económico, los propietarios europeos de las plantaciones cambiaron a los esclavos. Desde el siglo XVI al XIX, unos 10 millones de esclavos africanos fueron importados a América. Alrededor del 70 por ciento de ellos trabajaron en las plantaciones de azúcar. Las condiciones de trabajo eran abominables. La mayoría de los esclavos vivían una vida corta y miserable, y otros millones más murieron durante las guerras emprendidas para capturar esclavos o durante el largo viaje desde el interior de África a las costas de América. Y todo esto para que los europeos pudieran gozar de su té dulce y sus golosinas, y para que los magnates del azúcar pudieran obtener enormes ganancias.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 5902-5905 | Added on Wednesday, March 20, 2019 5:14:55 PM

Este es el pequeño inconveniente del capitalismo de libre mercado: no puede asegurar que los beneficios se obtengan de manera justa, o que se distribuyan de manera justa. Por el contrario, las ansias de aumentar los beneficios y la producción impiden ver a la gente cualquier cosa que se interponga en el camino. Cuando el crecimiento se convierte en un bien supremo, no limitado por ninguna otra consideración ética, puede conducir fácilmente a la catástrofe.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 5920-5927 | Added on Wednesday, March 20, 2019 5:15:06 PM

En 1876, el rey Leopoldo II de Bélgica fundó una organización humanitaria no gubernamental cuyo objetivo declarado era explorar el África central y combatir el tráfico de esclavos a lo largo del río Congo. También tenía el encargo de mejorar las condiciones para los habitantes de la región mediante la construcción de carreteras, escuelas y hospitales. En 1885, las potencias europeas acordaron conceder a esta organización el control de 2,3 millones de kilómetros cuadrados en la cuenca del Congo. Dicho territorio, de 75 veces el tamaño de Bélgica, se conoció a partir de entonces como Estado Libre del Congo. Nadie pidió la opinión de los 20-30 millones de habitantes del territorio. En cuestión de poco tiempo, la organización humanitaria se convirtió en una empresa de negocios cuyo objetivo real era el crecimiento y los beneficios. Las escuelas y los hospitales se olvidaron, y en cambio la cuenca del Congo se llenó de minas y plantaciones, dirigidas por funcionarios en su mayoría belgas que explotaban de manera despiadada a la población local.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6075-6076 | Added on Wednesday, March 20, 2019 5:34:41 PM

Los químicos no descubrieron el aluminio hasta la década de 1820, pero separar el metal de su mena era extraordinariamente difícil y costoso. Durante
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6110-6116 | Added on Wednesday, March 20, 2019 5:40:49 PM

En la época en que Homo sapiens era elevado al nivel divino por las religiones humanistas, los animales de granja dejaron de verse como criaturas vivas que podían sentir dolor y angustia, y en cambio empezaron a ser tratados como máquinas. En la actualidad, estos animales son producidos en masa en instalaciones que parecen fábricas, y su cuerpo se modela según las necesidades industriales. Pasan toda su vida como ruedas de una línea de producción gigantesca, y la duración y calidad de su existencia están determinadas por los beneficios y pérdidas de las empresas. Incluso cuando la industria se ocupa de mantenerlos vivos, razonablemente saludables y bien alimentados, no tiene ningún interés intrínseco en las necesidades sociales y psicológicas de los animales, excepto cuando estas tienen un impacto directo en la producción (véase la figura 25).
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6131-6134 | Added on Wednesday, March 20, 2019 5:43:34 PM

Muchas vacas lecheras viven casi todos los años que les son permitidos dentro de un pequeño recinto; allí están de pie, se sientan y duermen sobre sus propios orines y excrementos. Reciben su ración de comida, hormonas y medicamentos de un conjunto de máquinas, y son ordeñadas cada pocas horas por otro conjunto de máquinas. La vaca promedio es tratada como poco más que una boca que ingiere materias primas y una ubre que produce una mercancía.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6140-6143 | Added on Wednesday, March 20, 2019 5:44:34 PM

Irónicamente, las mismas disciplinas científicas que diseñan nuestras máquinas de ordeñar y de recoger huevos han demostrado últimamente, y más allá de toda duda razonable, que los mamíferos y las aves poseen una constitución sensorial y emocional compleja. No solo sienten dolor físico, sino que pueden padecer malestar emocional.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6179-6187 | Added on Wednesday, March 20, 2019 6:48:10 PM

Junto con la mecanización del cultivo de plantas, la zootecnia o ganadería industrial es la base para todo el orden socioeconómico moderno. Antes de la industrialización de la agricultura, la mayor parte del alimento producido en campos y granjas se «malgastaba» al alimentar a campesinos y animales de granja. Solo se disponía de un pequeño porcentaje para alimentar a artesanos, maestros, sacerdotes y burócratas. En consecuencia, en casi todas las sociedades los campesinos suponían más del 90 por ciento de la población. Después de la industrialización de la agricultura, un número decreciente de agricultores era suficiente para alimentar a un número creciente de dependientes de comercio y obreros de fábricas. Hoy en día, en Estados Unidos solo el 2 por ciento de la población vive de la agricultura,[9] pero este 2 por ciento produce lo suficiente no solo para alimentar a toda la población de Estados Unidos, sino también para exportar los excedentes al resto del mundo. Sin la industrialización de la agricultura, la revolución industrial urbana no habría podido tener lugar: no habría habido manos y cerebros suficientes para llenar fábricas y oficinas.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6154-6155 | Added on Wednesday, March 20, 2019 6:48:18 PM

La tragedia de la ganadería industrial es que se cuida mucho de las necesidades objetivas de los animales al tiempo que se olvida de sus necesidades subjetivas.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6226-6227 | Added on Wednesday, March 20, 2019 7:06:13 PM

Cada año la población de Estados Unidos gasta más dinero en dietas que la cantidad que se necesitaría para dar de comer a toda la gente hambrienta en el resto del mundo.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6227-6230 | Added on Wednesday, March 20, 2019 7:06:29 PM

La obesidad es una doble victoria para el consumismo. En lugar de comer poco, lo que conduce a la contracción económica, la gente come demasiado y después compra productos dietéticos, con lo que contribuye doblemente al crecimiento económico.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6240-6241 | Added on Wednesday, March 20, 2019 7:07:54 PM

La historia de la ética es un triste relato de ideales maravillosos que nadie cumple. La mayoría de los cristianos no imitan a Jesucristo, la mayoría de los budistas no siguen las enseñanzas de Buda
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6242-6246 | Added on Wednesday, March 20, 2019 7:08:48 PM

la mayoría de la gente vive hoy siendo capaz de cumplir con éxito el ideal capitalista-consumista. La nueva ética promete el paraíso a condición de que los ricos sigan siendo avariciosos y pasen su tiempo haciendo más dinero, y que las masas den rienda suelta a sus anhelos y pasiones y compren cada vez más. Esta es la primera religión en la historia cuyos seguidores hacen realmente lo que se les pide que hagan. ¿Y cómo sabemos que realmente obtendremos el paraíso a cambio? Porque lo hemos visto en la televisión.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6252-6253 | Added on Wednesday, March 20, 2019 7:09:39 PM

Nuestro planeta, antaño verde y azul, se está convirtiendo en un centro comercial de hormigón y plástico.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6450-6454 | Added on Thursday, March 21, 2019 8:59:14 AM

Anteriormente, el novio y la novia se encontraban en el salón familiar, y el dinero pasaba de las manos de un padre a las del otro. En la actualidad, el cortejo se hace en bares y cafés, y el dinero pasa de las manos de los amantes a las de los camareros. Y todavía se transfiere más dinero a las cuentas bancarias de los diseñadores de modas, dueños de gimnasios, dietistas, cosmetólogos y cirujanos plásticos, que nos ayudan a llegar al café con un aspecto lo más parecido posible al ideal de belleza del mercado.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6449-6454 | Added on Thursday, March 21, 2019 8:59:37 AM

hoy en día es el mercado el que ajusta nuestras preferencias románticas y sexuales, y después echa una mano para proporcionarlas a un precio elevado. Anteriormente, el novio y la novia se encontraban en el salón familiar, y el dinero pasaba de las manos de un padre a las del otro. En la actualidad, el cortejo se hace en bares y cafés, y el dinero pasa de las manos de los amantes a las de los camareros. Y todavía se transfiere más dinero a las cuentas bancarias de los diseñadores de modas, dueños de gimnasios, dietistas, cosmetólogos y cirujanos plásticos, que nos ayudan a llegar al café con un aspecto lo más parecido posible al ideal de belleza del mercado.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6508-6511 | Added on Thursday, March 21, 2019 10:10:21 AM

hoy en día la mayoría de personas pasan mucho más tiempo en el supermercado que en el campo de batalla, y en el supermercado la tribu de consumidores suele ser más poderosa que la nación.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6768-6772 | Added on Thursday, March 21, 2019 1:19:30 PM

Cuando se juzga la modernidad, es demasiado tentador adoptar el punto de vista de un ciudadano occidental de clase media del siglo XXI. No debemos olvidar los puntos de vista de un minero del carbón galés, de un adicto al opio chino o de un aborigen australiano, todos del siglo XIX. Truganini no es menos importante que Homer Simpson.
==========
Sapiens. De animales a dioses (Spanish Edition) (Harari, Yuval Noah)
- Your Highlight on Location 6775-6778 | Added on Thursday, March 21, 2019 1:20:46 PM

podemos felicitarnos por los logros sin precedentes de los sapiens modernos únicamente si ignoramos por completo la suerte de todos los demás animales. Gran parte de la riqueza material de la que nos jactamos que nos aísla de la enfermedad y de la hambruna se ha acumulado a expensas de monos de laboratorio, vacas lecheras y pollos en cintas transportadoras.
==========
maintaining-open-source-projects
- Your Highlight on Location 74-77 | Added on Thursday, March 21, 2019 5:38:36 PM

Issue tracker gardening A common problem that results in clutter in the issue tracker is irreproducibility. Users may be trying to show a legit issue with your project, but without enough information to reproduce it, which makes it hard to decide if it is indeed a problem with your project. In this case, ask them to provide more information. You might link toyourbugreportneedsmore.info for a curated, external explanation around reproducibility.
==========
maintaining-open-source-projects
- Your Highlight on Location 74-77 | Added on Thursday, March 21, 2019 5:38:57 PM

A common problem that results in clutter in the issue tracker is irreproducibility. Users may be trying to show a legit issue with your project, but without enough information to reproduce it, which makes it hard to decide if it is indeed a problem with your project. In this case, ask them to provide more information. You might link toyourbugreportneedsmore.info for a curated, external explanation around reproducibility.
==========
maintaining-open-source-projects
- Your Highlight on Location 87-89 | Added on Thursday, March 21, 2019 5:41:12 PM

To an issue with an unclear description another sometimes helpful route to take is to ask the requester to put together some quick code to further iterate on their issue (a spike). If the requester implements even part of the needed feature you can now have a more valuable discussion over a possible implementation,
==========
maintaining-open-source-projects
- Your Highlight on Location 100-105 | Added on Thursday, March 21, 2019 5:44:52 PM

The bike shed effect(also called “Parkinson’s law of triviality”) states that groups give disproportionate weight to trivial issues. For example, a committee whose job is to approve plans for a nuclear power plant spends the majority of its time on relatively unimportant but easy-to-grasp issues, such as what materials to use for the staff bike shed, while neglecting the less trivial proposed design of the nuclear power plant itself, which is far more important but also far more difficult and involved to criticize constructively. When you see more activity than usual in a discussion over a superficial matter (according to a threshold you define), take one decision (even if arbitrary) and call it resolved. You will save everybody’s time.
==========
maintaining-open-source-projects
- Your Highlight on Location 112-116 | Added on Thursday, March 21, 2019 5:46:19 PM

Fairness bias describes our tendency to seek balance. If a supplier keeps an open line of communication with an unhappy customer about a faulty product, the customer will respond more favorably regardless of the outcome. The need to be heard takes precedence over the need for the product working correctly. Fairness bias can be applied to code reviews. Framing an idea as a question instead of as an assertion makes the contributor feel heard and valued. If we are the authors of the code being reviewed, we can harness this effect before the conversation is even started, by explaining the rationale behind our work beforehand.
==========
maintaining-open-source-projects
- Your Highlight on Location 117-121 | Added on Thursday, March 21, 2019 5:47:02 PM

Loss aversion describes people’s tendency to strongly prefer avoiding losses to acquiring gains. More concretely, giving you 5 dollars won’t make you extra happy but if $5 are taken from you, you will get upset. Loss aversion relates with saying “no” to a patch. As a reviewer, giving a clear explanation of the reasons for your rejection helps avoiding a longer discussion on whether the patch should or should not be merged, helping authors see more objectively the value of their contributions. As a contributor, remember that if you were the reviewer or another external party, you would probably be a bit more skeptical than you currently are about the value of your patch.
==========
maintaining-open-source-projects
- Your Highlight on Location 122-124 | Added on Thursday, March 21, 2019 5:47:45 PM

the positive message you wrote may be assumed to be neutral, and what seemed indifferent to you can be read as hostile. You can avoid this by using positive language instead of neutral. Written discussions have less bandwidth and need to include more context than conversations over the phone or in person.
==========
maintaining-open-source-projects
- Your Highlight on Location 134-135 | Added on Thursday, March 21, 2019 5:48:53 PM

treat all your contributors as if they are the most valuable resource. They will respond by becoming your most valuable resource,
==========
maintaining-open-source-projects
- Your Highlight on Location 135-140 | Added on Thursday, March 21, 2019 5:49:36 PM

while giving feedback it’s good to: • Start with an appreciation of the work or comment. • Phrase ideas as questions when you are not sure that your feedback shows a clear step forward. • Be explicit. Online discussions have less bandwidth than in person and need more context. • Try to respond to every question and comment. • If you disagree strongly, consider giving it a moment before responding. • Don’t assume the audience shares your experience or context. Avoid words like “basically”, “simply”, “clearly”, etc. • Review is of the code, not people. Keep this in mind as a contributor too. Remember: every person knows something you don’t yet know.
==========
maintaining-open-source-projects
- Your Highlight on Location 151-152 | Added on Thursday, March 21, 2019 5:50:45 PM

In open source nobody owes anything to anyone. If anything, users owe maintainers gratitude for publishing something that was and is useful to them.
==========
maintaining-open-source-projects
- Your Highlight on Location 161-162 | Added on Thursday, March 21, 2019 5:52:42 PM

Keep commits cohesive. • Keep commits as small as possible.
==========
maintaining-open-source-projects
- Your Highlight on Location 164-170 | Added on Thursday, March 21, 2019 5:55:12 PM

if a patch fixes a bug and optimizes the performance of a feature, split it into two separate commits. The implementation of a feature and the corresponding tests belong in the same commit, which should not be split. A small and cohesive commit is easier to review and grasp. Git’s annotateandblame commands will be more clear about the origin and reason behind each line of the entire source code. If you find the need to revert the changeset, it is possible to revertthat single commit in an instant, and the project will exist as if that change wouldn’t have existed in the first place. The same applies if you have to backport (in git terms,cherry-pick) a fix to previous releases. Always keep commits as small and cohesive as possible and ask your contributors to do the same, and the project will be easier to maintain.
==========
maintaining-open-source-projects
- Your Highlight on Location 183-184 | Added on Thursday, March 21, 2019 5:58:32 PM

A good commit message answers three questions: • Why is this change necessary? • How does it address the issue? • What effects does the patch have? Note the absence of a “what is” type of question. We have the git log for that already;
==========
maintaining-open-source-projects
- Your Highlight on Location 203-207 | Added on Thursday, March 21, 2019 11:45:20 PM

Some people see value in keeping the evolution of the code unchanged, commit after commit, having the whole messy (but complete) changeset. Assuming each commit includes an explanation of the rationale behind of it, then history is complete, but that doesn’t mean clear. For a programmer at work, it’s more useful to understand what the code does and why, than a given contributor’s development and learning process. If the author takes the time to send a curated history rather than the raw version, it’s easier for everyone in the team to understand this change.
==========
maintaining-open-source-projects
- Your Highlight on Location 214-217 | Added on Thursday, March 21, 2019 11:47:08 PM

It is better to squash commits together right before merging and not earlier. That way, discussion and follow-up commits addressing the feedback stay synchronized, anyone can see how the feature came up to be across the different revisions, and the reviewer always knows what was addressed and what not. Be nice to people, floss every day, and keep your git history clean.
==========
maintaining-open-source-projects
- Your Highlight on Location 217-218 | Added on Thursday, March 21, 2019 11:47:29 PM

Wikipedia defines legacy code as source code inherited from someone else and source code inherited from an older version of the software. This means any code that lands into master becomes legacy code.
==========
maintaining-open-source-projects
- Your Highlight on Location 220-220 | Added on Thursday, March 21, 2019 11:47:57 PM

Code is a liability and solving problems with as little code as possible is almost always a good decision.
==========
maintaining-open-source-projects
- Your Highlight on Location 224-227 | Added on Thursday, March 21, 2019 11:49:04 PM

To make sure merging a given patch is a good idea, you can ask the following questions: • Will you or your team want to maintain it? • Will the author be reachable for support, answer questions that the community will have around that feature, or fix related bugs? • Will you like maintaining that addition? • Do you see it bringing in more value than cost? Say “no” when you believe the addition will not be helpful to the project, the team maintaining it, and by extension, its users.
==========
maintaining-open-source-projects
- Your Highlight on Location 239-239 | Added on Thursday, March 21, 2019 11:50:26 PM

small discrepancies give the impression of individual developers working without purpose rather than a team working together toward a common goal.
==========
maintaining-open-source-projects
- Your Highlight on Location 239-240 | Added on Thursday, March 21, 2019 11:50:39 PM

Lack of attention to detail conveys an attitude that might permeate other aspects of a project like readability, dependency management, and testing.
==========
maintaining-open-source-projects
- Your Highlight on Location 240-241 | Added on Thursday, March 21, 2019 11:50:54 PM

An inconsistent style is a superficial but notable sign that people don’t care much about quality.
==========
maintaining-open-source-projects
- Your Highlight on Location 246-247 | Added on Thursday, March 21, 2019 11:51:59 PM

If you write ugly code, anyone who intends to fix a bug or add a feature will not enjoy their work and likely avoid it next time.
==========
maintaining-open-source-projects
- Your Highlight on Location 253-255 | Added on Thursday, March 21, 2019 11:53:03 PM

You can write the coding standard for your project or adopt an existing one, and follow it. Any guideline will be useful, as any one of them will handle a myriad of little decisions for you and your team so you don’t need to think about them too. In many cases it doesn’t matter what decisions these are; the point is to avoid having to discuss them frequently.
==========
maintaining-open-source-projects
- Your Highlight on Location 264-264 | Added on Thursday, March 21, 2019 11:54:28 PM

lack of process is what gets us to new discoveries. Not everything has to feel cookie cut, particularly for explorations.
==========
maintaining-open-source-projects
- Your Highlight on Location 399-402 | Added on Friday, March 22, 2019 12:09:45 AM

In any piece of documentation in your project there shouldn’t be words like obviously, basically, simply, easy, etc. In the case where it’s not obvious they might trigger feelings of vulnerability (“why didn’t I already know this?”). And in the case where it was indeed a known fact, the word doesn’t add any information,
==========
maintaining-open-source-projects
- Your Highlight on Location 105-106 | Added on Sunday, March 24, 2019 12:59:23 AM

Godwin’s law states that as an online discussion grows longer (regardless of topic or scope), sooner or later someone will compare someone or something to Hitler or Nazism.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 27 | Location 404-405 | Added on Monday, March 25, 2019 11:14:54 AM

it is through practice in the small that professionals gain proficiency and trust for practice in the large.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 42 | Location 631-632 | Added on Monday, March 25, 2019 11:20:53 AM

We know good code matters because we’ve had to deal for so long with its lack.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 43 | Location 653-654 | Added on Monday, March 25, 2019 11:22:08 AM

LeBlanc’s law: Later equals never.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 46 | Location 693-694 | Added on Monday, March 25, 2019 11:26:31 AM

We are deeply complicit in the planning of the project and share a great deal of the responsibility for any failures; especially if those failures have to do with bad code!
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 46 | Location 696-698 | Added on Monday, March 25, 2019 11:26:47 AM

Most managers want the truth, even when they don’t act like it. Most managers want good code, even when they are obsessing about the schedule. They may defend the schedule and requirements with passion; but that’s their job. It’s your job to defend the code with equal passion.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 46 | Location 699-702 | Added on Monday, March 25, 2019 11:28:03 AM

what if you were a doctor and had a patient who demanded that you stop all the silly hand-washing in preparation for surgery because it was taking too much time?2 Clearly the patient is the boss; and yet the doctor should absolutely refuse to comply. Why? Because the doctor knows more than the patient about the risks of disease and infection. It would be unprofessional (never mind criminal) for the doctor to comply with the patient.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 47 | Location 707-708 | Added on Monday, March 25, 2019 11:29:29 AM

All developers with more than a few years experience know that previous messes slow them down. And yet all developers feel the pressure to make messes in order to meet deadlines.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 47 | Location 710-711 | Added on Monday, March 25, 2019 11:29:51 AM

You will not make the deadline by making the mess. Indeed, the mess will slow you down instantly, and will force you to miss the deadline.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 47 | Location 716-717 | Added on Monday, March 25, 2019 11:34:04 AM

writing clean code is a lot like painting a picture. Most of us know when a picture is painted well or badly. But being able to recognize good art from bad does not mean that we know how to paint.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 49 | Location 745-747 | Added on Monday, March 25, 2019 11:40:44 AM

A building with broken windows looks like nobody cares about it. So other people stop caring. They allow more windows to become broken. Eventually they actively break them. They despoil the facade with graffiti and allow garbage to collect. One broken window starts the process toward decay.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 50 | Location 754-755 | Added on Monday, March 25, 2019 11:41:38 AM

Bad code tries to do too much, it has muddled intent and ambiguity of purpose. Clean code is focused.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 59 | Location 903-907 | Added on Monday, March 25, 2019 11:50:07 AM

the ratio of time spent reading vs. writing is well over 10:1. We are constantly reading old code as part of the effort to write new code. Because this ratio is so high, we want the reading of code to be easy, even if it makes the writing harder. Of course there’s no way to write code without reading it, so making it easy to read actually makes it easier to write.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 60 | Location 913-915 | Added on Monday, March 25, 2019 11:51:02 AM

The Boy Scouts of America have a simple rule that we can apply to our profession. Leave the campground cleaner than you found it.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 60 | Location 917-918 | Added on Monday, March 25, 2019 11:51:47 AM

If we all checked-in our code a little cleaner than when we checked it out, the code simply could not rot.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 62 | Location 950-952 | Added on Monday, March 25, 2019 11:53:26 AM

Names are everywhere in software. We name our variables, our functions, our arguments, classes, and packages. We name our source files and the directories that contain them. We name our jar files and war files and ear files. We name and name and name. Because we do so much of it, we’d better do it well.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 63 | Location 955-955 | Added on Monday, March 25, 2019 11:53:52 AM

Choosing good names takes time but saves more than it takes.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 63 | Location 957-966 | Added on Monday, March 25, 2019 11:55:07 AM

The name of a variable, function, or class, should answer all the big questions. It should tell you why it exists, what it does, and how it is used. If a name requires a comment, then the name does not reveal its intent.    int d; // elapsed time in days The name d reveals nothing. It does not evoke a sense of elapsed time, nor of days. We should choose a name that specifies what is being measured and the unit of that measurement:    int elapsedTimeInDays;    int daysSinceCreation;    int daysSinceModification;    int fileAgeInDays;
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 67 | Location 1023-1026 | Added on Monday, March 25, 2019 12:01:03 PM

Beware of using names which vary in small ways. How long does it take to spot the subtle difference between a XYZControllerForEfficientHandlingOfStrings in one module and, somewhere a little more distant, XYZControllerForEfficientStorageOfStrings? The words have frightfully similar shapes.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 69 | Location 1051-1053 | Added on Monday, March 25, 2019 12:04:31 PM

It is not sufficient to add number series or noise words, even though the compiler is satisfied. If names must be different, then they should also mean something different.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 69 | Location 1053-1062 | Added on Monday, March 25, 2019 12:05:47 PM

Number-series naming (a1, a2, .. aN) is the opposite of intentional naming. Such names are not disinformative—they are noninformative; they provide no clue to the author’s intention. Consider:    public static void copyChars(char a1[], char a2[]) {      for (int i = 0; i < a1.length; i++) {        a2[i] = a1[i];      }    } This function reads much better when source and destination are used for the argument names.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 70 | Location 1063-1065 | Added on Monday, March 25, 2019 12:06:49 PM

Imagine that you have a Product class. If you have another called ProductInfo or ProductData, you have made the names different without making them mean anything different.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 71 | Location 1088-1093 | Added on Monday, March 25, 2019 12:08:11 PM

the variable moneyAmount is indistinguishable from money, customerInfo is indistinguishable from customer, accountData is indistinguishable from account, and theMessage is indistinguishable from message. Distinguish names in such a way that the reader knows what the differences offer.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 72 | Location 1096-1097 | Added on Monday, March 25, 2019 12:09:32 PM

make your names pronounceable. If you can’t pronounce it, you can’t discuss it without sounding like an idiot.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 73 | Location 1118-1121 | Added on Monday, March 25, 2019 12:10:42 PM

Single-letter names and numeric constants have a particular problem in that they are not easy to locate across a body of text. One might easily grep for MAX_CLASSES_PER_STUDENT, but the number 7 could be more troublesome.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 74 | Location 1127-1129 | Added on Monday, March 25, 2019 12:12:23 PM

single-letter names can ONLY be used as local variables inside short methods. The length of a name should correspond to the size of its scope [N5]. If a variable or constant might be seen or used in multiple places in a body of code, it is imperative to give it a search-friendly name.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 79 | Location 1207-1212 | Added on Monday, March 25, 2019 12:17:42 PM

Classes and objects should have noun or noun phrase names like Customer, WikiPage, Account, and AddressParser. Avoid words like Manager, Processor, Data, or Info in the name of a class. A class name should not be a verb.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 80 | Location 1214-1216 | Added on Monday, March 25, 2019 12:18:00 PM

Methods should have verb or verb phrase names like postPayment, deletePage, or save.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 81 | Location 1241-1243 | Added on Monday, March 25, 2019 12:19:29 PM

Pick one word for one abstract concept and stick with it. For instance, it’s confusing to have fetch, retrieve, and get as equivalent methods of different classes.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 84 | Location 1274-1275 | Added on Monday, March 25, 2019 12:27:24 PM

Remember that the people who read your code will be programmers. So go ahead and use computer science (CS) terms, algorithm names, pattern names, math terms, and so forth.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 84 | Location 1287-1289 | Added on Monday, March 25, 2019 12:27:54 PM

you need to place names in context for your reader by enclosing them in well-named classes, functions, or namespaces. When all else fails, then prefixing the name may be necessary as a last resort.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 90 | Location 1379-1380 | Added on Monday, March 25, 2019 12:30:02 PM

Shorter names are generally better than longer ones, so long as they are clear.
==========
Clean Code (Robert C. Martin)
- Your Highlight on page 91 | Location 1390-1391 | Added on Monday, March 25, 2019 12:35:16 PM

People are also afraid of renaming things for fear that some other developers will object. We do not share that fear and find that we are actually grateful when names change (for the better).
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 30-31 | Added on Monday, March 25, 2019 12:46:05 PM

Complexity turns reliable software in unreliable software. Complexity is what kills software projects. Therefore simplicity is the highest goal of Go.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 34-35 | Added on Monday, March 25, 2019 12:46:21 PM

Programs must be written for people to read, and only incidentally for machines to execute. — Hal Abelson and Gerald Sussman
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 35-36 | Added on Monday, March 25, 2019 12:46:40 PM

all software, not just Go programs, is written by humans to be read by other humans. The fact that software is also consumed by machines is secondary.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 39-41 | Added on Monday, March 25, 2019 12:47:20 PM

Readability is key to being able to understand what the program is doing. If you can’t understand what a program is doing, how can you hope to maintain it? If software cannot be maintained, then it will be rewritten;
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 53-56 | Added on Monday, March 25, 2019 12:48:36 PM

Go programmers realise that code is written to be read and so place the act of reading code above the act of writing it. Go goes so far as to enforce, via tooling and custom, that all code be formatted in a specific style. This removes the friction of learning a project specific dialect and helps spot mistakes because they just look incorrect.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 68-70 | Added on Monday, March 25, 2019 12:49:30 PM

Good naming is like a good joke. If you have to explain it, it’s not funny. — Dave Cheney
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 72-72 | Added on Monday, March 25, 2019 12:49:59 PM

Good names have a high signal to noise ratio.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 73-74 | Added on Monday, March 25, 2019 12:50:32 PM

A good name should describe the application of a variable or constant, not their contents.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 83-87 | Added on Monday, March 25, 2019 12:52:28 PM

Short variable names work well when the distance between their declaration and last use is short. Long variable names need to justify themselves; the longer they are the more value they need to provide. Lengthy bureaucratic names carry a low amount of signal compared to their weight on the page. Don’t include the name of your type in the name of your variable. Constants should describe the value they hold, not how that value is used.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 82-87 | Added on Monday, March 25, 2019 12:52:40 PM

The greater the distance between a name’s declaration and its uses, the longer the name should be. — Andrew Gerrand [] From this we can draw some guidelines: Short variable names work well when the distance between their declaration and last use is short. Long variable names need to justify themselves; the longer they are the more value they need to provide. Lengthy bureaucratic names carry a low amount of signal compared to their weight on the page. Don’t include the name of your type in the name of your variable. Constants should describe the value they hold, not how that value is used.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 104-105 | Added on Monday, March 25, 2019 12:53:01 PM

Use blank lines to break up the flow of a function in the same way you use paragraphs to break up the flow of a document.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 120-121 | Added on Monday, March 25, 2019 12:54:16 PM

You shouldn’t name your variables after their types for the same reason you don’t name your pets "dog" and "cat".
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 148-149 | Added on Monday, March 25, 2019 12:56:32 PM

The reader should be able to understand the use of a name when they encounter it for the first time. When they encounter a common name, they should be able to assume it has not changed meanings since the last time they saw it.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 184-186 | Added on Monday, March 25, 2019 12:59:08 PM

When declaring and initialising the variable at the same time, that is to say we’re not letting the variable be implicitly initialised to its zero value, I recommend using the short variable declaration form. This makes it clear to the reader that the variable on the left hand side of the := is being deliberately initialised.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 227-229 | Added on Monday, March 25, 2019 1:01:57 PM

Changing styles in the middle of a file is jarring. Uniformity, even if its not your preferred approach, is more valuable for maintenance than your personal preference.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 230-232 | Added on Monday, March 25, 2019 1:02:23 PM

If you want to do a renaming across a code-base, do not mix this into another change. If someone is using git bisect they don’t want to wade through thousands of lines of renaming to find the code you changed as well.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 301-302 | Added on Monday, March 25, 2019 1:08:12 PM

Functions should do one thing only. If you find yourself commenting a piece of code because it is unrelated to the rest of the function, consider extracting it into a function of its own.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 306-308 | Added on Monday, March 25, 2019 1:08:54 PM

Each Go package is in effect it’s own small Go program. Just as the implementation of a function or method is unimportant to the caller, the implementation of the functions, methods and types that comprise your package’s public API—​its behaviour—​is unimportant for the caller.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 317-318 | Added on Monday, March 25, 2019 1:09:43 PM

Name your package for what it provides, not what it contains.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 331-332 | Added on Monday, March 25, 2019 1:47:05 PM

[A little] duplication is far cheaper than the wrong abstraction. — Sandy Metz
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 348-351 | Added on Monday, March 25, 2019 1:50:12 PM

Rather than the successful path nesting deeper and deeper to the right, Go code is written in a style where the success path continues down the screen as the function progresses. My friend Mat Ryer calls this practice 'line of sight' coding. [] This is achieved by using guard clauses; conditional blocks with assert preconditions upon entering a function.
==========
Practical Go: Real world advice for writing maintainable Go programs (The Pragmatic Programmer)
- Your Highlight on Location 392-396 | Added on Thursday, March 28, 2019 12:46:40 AM

The key to writing maintainable programs is that they should be loosely coupled—​a change to one package should have a low probability of affecting another package that does not directly depend on the first. There are two excellent ways to achieve loose coupling in Go Use interfaces to describe the behaviour your functions or methods require. Avoid the use of global state.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 13 | Location 96-97 | Added on Thursday, March 28, 2019 12:52:57 AM

If you ask people where they go when they really need to get work done, very few will respond “the office.”
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 15 | Location 105-106 | Added on Thursday, March 28, 2019 12:53:28 AM

The ability to be alone with your thoughts is, in fact, one of the key advantages of working remotely.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 22 | Location 147-148 | Added on Thursday, March 28, 2019 12:58:51 AM

The big transition with a distributed workforce is going from synchronous to asynchronous collaboration. Not only do we not have to be in the same spot to work together, we also don’t have to work at the same time to work together.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 28 | Location 190-192 | Added on Friday, March 29, 2019 2:04:06 AM

Your life no longer needs to be divided into arbitrary phases of work and retirement. You can blend the two for fun and profit—design a better lifestyle that makes work enjoyable because it’s not the only thing on the menu.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 29 | Location 198-199 | Added on Friday, March 29, 2019 2:04:59 AM

The new luxury is the luxury of freedom and time. Once you’ve had a taste of that life, no corner office or fancy chef will be able to drag you back.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 34 | Location 220-221 | Added on Friday, March 29, 2019 2:07:16 AM

Letting people work remotely is about promoting quality of life, about getting access to the best people wherever they are,
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 54 | Location 325-326 | Added on Saturday, March 30, 2019 5:46:36 AM

coming into the office just means that people have to put on pants. There’s no guarantee of productivity.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 55 | Location 333-334 | Added on Saturday, March 30, 2019 5:48:23 AM

if you can’t let your employees work from home out of fear they’ll slack off without your supervision, you’re a babysitter, not a manager.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 57 | Location 338-339 | Added on Saturday, March 30, 2019 5:49:18 AM

you shouldn’t hire people you don’t trust, or work for bosses who don’t trust you.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 59 | Location 362-364 | Added on Saturday, March 30, 2019 5:52:00 AM

Most people want to work, as long as it’s stimulating and fulfilling. And if you’re stuck in a dead-end job that has no prospects of being either, then you don’t just need a remote position—you need a new job.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 74 | Location 432-434 | Added on Sunday, March 31, 2019 3:29:02 AM

Culture isn’t a foosball table. It’s not a paintball outing in the forest. It’s not even the Christmas party where Steve got so drunk that everyone had a good story for the rest of the year. That’s people hanging out and having a good time. No, culture is the spoken and unspoken values and actions of the organization.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 77 | Location 452-454 | Added on Sunday, March 31, 2019 3:32:10 AM

not every question needs an answer immediately—there’s nothing more arrogant than taking up someone else’s time with a question you don’t need an answer to right now. That means realizing that not everything is equally important.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 77 | Location 454-457 | Added on Sunday, March 31, 2019 3:33:03 AM

Questions you can wait hours to learn the answers to are fine to put in an email. Questions that require answers in the next few minutes can go into an instant message. For crises that truly merit a sky-is-falling designation, you can use that old-fashioned invention called the telephone.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 99 | Location 592-592 | Added on Tuesday, April 2, 2019 12:36:42 AM

avoid locking up important stuff in a single person’s computer or inbox. Put all the important stuff out in the open,
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 102 | Location 606-608 | Added on Tuesday, April 2, 2019 12:39:43 AM

you, the remote worker, are in control of your social interaction—when it happens and how much of it you need. At first it might simply seem like a waste of time, especially if you’re not already used to reading Reddit on the side, but it’s a quality waste of time with your coworkers. We all need that.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 103 | Location 616-619 | Added on Tuesday, April 2, 2019 12:41:21 AM

At 37signals we’ve institutionalized this through a weekly discussion thread with the subject “What have you been working on?” Everyone chimes in with a few lines about what they’ve done over the past week and what’s intended for the next week. It’s not a precise, rigorous estimation process, and it doesn’t attempt to deal with coordination. It simply aims to make everyone feel like they’re in the same galley and not their own little rowboat.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 114 | Location 679-681 | Added on Tuesday, April 2, 2019 12:47:54 AM

When meetings are the norm, the first resort, the go to tool to discuss, debate, and solve every problem, they become overused and we grow numb to the outcome. Meetings should be like salt—sprinkled carefully to enhance a dish, not poured recklessly over every forkful. Too much salt destroys a dish. Too many meetings can destroy morale and motivation.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 146 | Location 870-871 | Added on Tuesday, April 2, 2019 1:49:59 AM

You need solid writers to make remote work work, and a solid command of your home language is key.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 150 | Location 896-897 | Added on Wednesday, April 3, 2019 12:37:48 AM

the human connection is even more important when hiring remote workers because it has to be stronger to survive the distance.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 167 | Location 1002-1003 | Added on Wednesday, April 3, 2019 12:51:52 AM

Being a good writer is an essential part of being a good remote worker. When most arguments are settled over email or chat or discussion boards, you’d better show up equipped for the task.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 182 | Location 1093-1094 | Added on Wednesday, April 3, 2019 11:24:41 AM

Working remotely blows a big fat hole in that style of management. If I can’t see workers come in and leave their desks, how on earth can I make sure they’re actually working? Or so goes the naïve thinking of a manager of chairs.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 122-123 | Added on Wednesday, April 3, 2019 4:23:28 PM

A cluster is a collection of computers coordinated to work as a single unit. In Kubernetes this consists of a master node and worker nodes.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 125-127 | Added on Wednesday, April 3, 2019 4:23:50 PM

etcd A distributed key-value store used in Kubernetes to store configuration data for the cluster.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 127-128 | Added on Wednesday, April 3, 2019 4:24:12 PM

Controller Controllers are responsible for updating resources in Kubernetes based on changes to data in etcd.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 129-130 | Added on Wednesday, April 3, 2019 4:24:25 PM

scheduler A module in the Kubernetes master that selects which worker node a pod should run on, based on resource requirements.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 130-131 | Added on Wednesday, April 3, 2019 4:24:35 PM

node A worker machine in the Kubernetes cluster, responsible for actually running pods.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 133-133 | Added on Wednesday, April 3, 2019 4:24:40 PM

takes responsibility for containers that run on that node.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 132-133 | Added on Wednesday, April 3, 2019 4:24:48 PM

kubelet A process that runs on each worker node, and takes responsibility for containers that run on that node.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 147-147 | Added on Wednesday, April 3, 2019 4:25:14 PM

containers to be colocated and share filesystem and network resources.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 145-147 | Added on Wednesday, April 3, 2019 4:25:21 PM

Pod The smallest object that Kubernetes interacts with. It is a layer of abstraction around the container, allowing for containers to be colocated and share filesystem and network resources.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 148-149 | Added on Wednesday, April 3, 2019 4:25:33 PM

Service A Kubernetes object used to expose a dynamic set of pods to the network behind a single interface.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 150-151 | Added on Wednesday, April 3, 2019 4:25:46 PM

Deployment A Kubernetes object that manages a set of pods as a single unit, controlling their replication, update, and rollback.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 163-164 | Added on Wednesday, April 3, 2019 4:26:09 PM

Liveness Probe A process that checks if a container is still alive or if it needs to be restarted.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 165-166 | Added on Wednesday, April 3, 2019 4:26:17 PM

Readiness Probe A process that checks if a container has started successfully and is ready to start receiving requests.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 169-170 | Added on Wednesday, April 3, 2019 4:26:29 PM

Sidecar pattern A multi-container design pattern where another container runs alongside your main application and performs some task non-essential to the application container.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 171-173 | Added on Wednesday, April 3, 2019 4:26:45 PM

Adapter pattern A multi-container design pattern where an adapter container massages the output or formatting of your main application so that it can be consumed by another party.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 174-176 | Added on Wednesday, April 3, 2019 4:27:05 PM

Ambassador pattern A multi-container design pattern where the ambassador container proxies network requests to a third party. The main application makes requests to localhost, and the ambassador is responsible for forwarding those requests to the external service.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 179-181 | Added on Wednesday, April 3, 2019 4:27:47 PM

Volume mount The mechanism by which a container gains access to a volume. The container declares a volume mount, and then it can read or write to that path as though it were a symbolic link to the volume.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 177-178 | Added on Wednesday, April 3, 2019 4:27:54 PM

Volume A piece of storage in a Kubernetes pod that lives for (at least) as long as the pod is alive. Analogous to a directory in your filesystem.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 701-702 | Added on Thursday, April 4, 2019 1:22:19 AM

  Second—how do I get to the ideal state? Kubernetes
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 702-703 | Added on Thursday, April 4, 2019 1:22:27 AM

Kubernetes has a group of controllers whose job it is to make the actual cluster state match the ideal state.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 696-696 | Added on Thursday, April 4, 2019 1:23:32 AM

gives access to the Kubernetes API via a HTTP REST API.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 694-696 | Added on Thursday, April 4, 2019 1:23:44 AM

Kubernetes is told to run a new pod, scale a deployment, or maybe to add more storage. The request is made through the API server (kube-apiserver), a process inside the master that gives access to the Kubernetes API via a HTTP REST API.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 718-721 | Added on Thursday, April 4, 2019 1:24:37 AM

kube-scheduler determines which node should run a pod. It finds new pods that don't have a node assigned, looks at the cluster's overall resource utilisation, hardware and software policies, node affinity, and deadlines, and then decides which node should run that pod.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 721-725 | Added on Thursday, April 4, 2019 1:25:15 AM

The master maintains the actual and desired state of the cluster using etcd, lets users and nodes change the desired state via the kube-apiserver, runs controllers that reconcile these states, and the kube-scheduler assigns pods to a node to run.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 727-728 | Added on Thursday, April 4, 2019 1:25:47 AM

Every node in a Kubernetes cluster has a container runtime, a Kubernetes node agent, a networking proxy, and a resource monitoring service.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 729-730 | Added on Thursday, April 4, 2019 1:26:08 AM

The container runtime is responsible for actually running the containers that you specify.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 733-739 | Added on Thursday, April 4, 2019 1:26:41 AM

kubelet is a process that runs on each node that takes responsibility for the state of that node. It starts and stops containers as directed by the master, and ensures that its containers remain healthy. It will also track the state of each of its pods, and if a pod is not in its desired state, it will be redeployed. kubelet must also relay its health to the master every few seconds. If the master sees that a node has failed (i.e. kubelet has failed to report that the node is healthy), controllers will see this change and relaunch pods on healthy nodes.￼  
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 741-743 | Added on Thursday, April 4, 2019 1:27:08 AM

Every Kubernetes node also requires a networking proxy (kube-proxy) so that it can communicate with other services in the cluster and the master node. This process is responsible for routing networking traffic to the relevant container and other networking operations.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 744-746 | Added on Thursday, April 4, 2019 1:27:14 AM

Every Kubernetes node also runs cAdvisor, a simple agent that monitors the performance and resource usage of containers on the node.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 192 | Location 1152-1153 | Added on Thursday, April 4, 2019 1:58:29 AM

If you treat remote workers like second-class citizens, you’re all going to have a bad time. The lower the ratio of remote worker to office worker, the more likely this is to happen.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 192 | Location 1157-1158 | Added on Thursday, April 4, 2019 1:59:10 AM

As a company owner or manager, you need to create and maintain a level playing field—one on which those in and out of the office stand as equals.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 198 | Location 1191-1192 | Added on Friday, April 5, 2019 2:18:41 AM

Start by empowering everyone to make decisions on their own. If the company is full of people whom nobody trusts to make decisions without layers of managerial review, then the company is full of the wrong people.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 202 | Location 1211-1212 | Added on Friday, April 5, 2019 2:21:20 AM

you might think that the major risk in setting your people free is that they’ll turn into lazy, unproductive slackers. In reality, it’s overwork, not underwork, that’s the real enemy in a successful remote-working environment
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 204 | Location 1222-1224 | Added on Friday, April 5, 2019 2:22:36 AM

If work is all-consuming, the worker is far more likely to burn out. This is true even if the person loves what he does. Perhaps especially if he loves what he does, since it won’t seem like a problem until it’s too late.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 206 | Location 1248-1249 | Added on Friday, April 5, 2019 2:32:35 AM

make face-to-face harder and less frequent and you’ll see the value of these interactions go up, not down.
==========
Remote (Heinemeier Hansson, David)
- Your Highlight on page 221 | Location 1319-1321 | Added on Saturday, April 6, 2019 1:45:03 AM

Motivation is the fuel of intellectual work. You can get several days’ worth of work completed in one motivation-turboed afternoon. Or, when you’re motivation starved, you can waste a week getting a day’s worth of work done.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 1146-1148 | Added on Saturday, April 6, 2019 2:43:06 AM

When should you combine multiple containers into a single pod? When the containers have the exact same lifecycle, when the containers share filesystem resources, or when the containers must run on the same node.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 1311-1312 | Added on Wednesday, April 10, 2019 10:34:47 AM

application to always connect to localhost, and let the responsibility of mapping this connecting to the right database fall to an ambassador container.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 1382-1384 | Added on Wednesday, April 10, 2019 10:39:03 AM

You can think of selectors as the WHERE part of a SELECT * from pods WHERE <labels> = <values>. You use label selectors from the command line or in an object’s YAML when it needs to select other objects.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 1408-1410 | Added on Wednesday, April 10, 2019 10:40:47 AM

one of the most common uses of labels and selectors is to group pods into a service. The selector field in a service's spec defines which pods receive requests sent to that service.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 1461-1462 | Added on Wednesday, April 10, 2019 10:42:53 AM

Deployments in Kubernetes let you manage a set of identical pods
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 1578-1581 | Added on Wednesday, April 10, 2019 10:48:50 AM

RollingUpdate The preferred and more commonly used strategy is RollingUpdate. This gracefully updates pods one at a time to prevent your application from going down. The strategy gradually brings pods with the new configuration online, while killing old pods as the new configuration scales up.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 1583-1593 | Added on Wednesday, April 10, 2019 10:49:38 AM

there are two useful fields you can configure.   maxUnavailable effectively determines the minimum number of pods you want running in your deployment as it updates. For example, if we have a deployment currently running ten pods and a maxUnavailable value of 4. When an update is triggered, Kubernetes will immediately kill four pods from the old configuration, bringing our total to six. Kubernetes then starts to bring up the new pods, and kills old pods as they come alive. Eventually the deployment will have ten replicas of the new pod, but at no point during the update were there fewer than six pods available.   maxSurge determines the maximum number of pods you want running in your deployment as it updates. In the previous example, if we specified a maxSurge of 3, Kubernetes could immediately create three copies of the new pod, bringing the total to 13, and then begin killing off the old versions.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 1582-1593 | Added on Wednesday, April 10, 2019 10:49:46 AM

When updating your deployment with RollingUpdate, there are two useful fields you can configure.   maxUnavailable effectively determines the minimum number of pods you want running in your deployment as it updates. For example, if we have a deployment currently running ten pods and a maxUnavailable value of 4. When an update is triggered, Kubernetes will immediately kill four pods from the old configuration, bringing our total to six. Kubernetes then starts to bring up the new pods, and kills old pods as they come alive. Eventually the deployment will have ten replicas of the new pod, but at no point during the update were there fewer than six pods available.   maxSurge determines the maximum number of pods you want running in your deployment as it updates. In the previous example, if we specified a maxSurge of 3, Kubernetes could immediately create three copies of the new pod, bringing the total to 13, and then begin killing off the old versions.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 1594-1596 | Added on Wednesday, April 10, 2019 10:51:24 AM

A deployment's entire rollout and configuration history is tracked in Kubernetes, allowing for powerful undo and redo functionality. You can easily rollback to a previous version of your deployment at any time.
==========
Kubernetes - App Development (Matthew Palmer)
- Your Highlight on Location 1761-1763 | Added on Wednesday, April 10, 2019 11:00:22 AM

Services let you define networking rules for pods based on their labels. Whenever a pod with a matching label appears in the Kubernetes cluster, the service will detect it and start using it to handle network requests made to the service.
==========
Breves respuestas a las grandes preguntas (Spanish Edition) (Hawking, Stephen)
- Your Highlight on Location 751-752 | Added on Tuesday, May 28, 2019 12:23:07 AM

principio antrópico dice que el universo tiene que ser más o menos como lo vemos, porque si fuera diferente no habría nadie para observarlo
==========
Breves respuestas a las grandes preguntas (Spanish Edition) (Hawking, Stephen)
- Your Highlight on Location 871-874 | Added on Monday, June 3, 2019 12:05:02 AM

A primera vista, parece notable que el universo esté tan finamente sintonizado. Tal vez esto es evidencia de que el universo fue especialmente diseñado para producir la especie humana. Sin embargo, tenemos que ir con cuidado con tales argumentos, que se conocen como Principio Antrópico. Este principio se basa en la evidencia de que si el universo no hubiera sido adecuado para la vida, no estaríamos aquí, preguntándonos por qué está equilibrado tan finamente.
==========
Breves respuestas a las grandes preguntas (Spanish Edition) (Hawking, Stephen)
- Your Highlight on Location 1100-1105 | Added on Thursday, June 6, 2019 10:34:39 AM

Werner Heisenberg, otro físico alemán, señaló que no se podía medir simultánea y exactamente la posición y la velocidad de una partícula. Para ver dónde está una partícula hay que iluminarla. Pero según el trabajo de Planck, no se puede usar una cantidad arbitrariamente pequeña de luz. Se tiene que usar al menos un cuanto. Este perturbará la partícula y cambiará su velocidad de una manera que no puede predecirse. Para medir con precisión la posición de la partícula, se tendrá que usar luz de longitud de onda corta, como por ejemplo rayos ultravioleta, rayos X o gamma. Pero, de nuevo, según el trabajo de Planck, los cuanta de esas formas de luz tienen energías más altas que los de la luz visible. Por lo tanto, alterarán más la velocidad de la partícula.
==========
Breves respuestas a las grandes preguntas (Spanish Edition) (Hawking, Stephen)
- Your Highlight on Location 1127-1132 | Added on Thursday, June 6, 2019 10:38:05 AM

En mecánica cuántica, las partículas no tienen posiciones y velocidades bien definidas. En lugar de eso, están representadas por lo que se llama la función de onda, que es un número en cada punto del espacio. El valor de la función de onda da la probabilidad de que la partícula se encuentre en dicha posición. El ritmo con que la función de onda varía de un punto a otro da la velocidad de la partícula. Se puede tener una función de onda con valor muy grande en una región muy pequeña. Eso significa que la incertidumbre en la posición es pequeña. Pero la función de onda variará muy rápidamente cerca del pico, arriba en un lado y abajo en el otro. Por lo tanto, la incertidumbre en la velocidad será grande.
==========
Breves respuestas a las grandes preguntas (Spanish Edition) (Hawking, Stephen)
- Your Highlight on Location 1321-1323 | Added on Sunday, June 9, 2019 9:27:37 PM

Otra posibilidad es que fuéramos capaces de crear microagujeros negros en las dimensiones extra del espacio-tiempo. Según algunas teorías, el universo que experimentamos es solo una superficie de cuatro dimensiones en un espacio de diez u once dimensiones. La película
==========
Breves respuestas a las grandes preguntas (Spanish Edition) (Hawking, Stephen)
- Your Highlight on Location 1613-1615 | Added on Sunday, June 9, 2019 10:00:31 PM

Hemos hecho a nuestro planeta el regalo desastroso del cambio climático: temperaturas crecientes, reducción de los casquetes polares, deforestación, sobrepoblación, enfermedades, guerras, hambrunas, falta de agua y diezmamiento de especies animales. Todos estos problemas tienen soluciones, pero hasta ahora no han sido aplicadas.
==========
Breves respuestas a las grandes preguntas (Spanish Edition) (Hawking, Stephen)
- Your Highlight on Location 1625-1632 | Added on Sunday, June 9, 2019 10:02:35 PM

El peligro es que el calentamiento global puede empezar a retroalimentarse, si no lo ha hecho ya. El derretimiento del Ártico y del casquete polar antártico reduce la fracción de energía solar que se refleja en el espacio, con lo cual la temperatura aumenta más. El cambio climático puede matar la Amazonia y otras selvas tropicales y eliminar una de las principales formas en que se extrae dióxido de carbono de la atmósfera. El aumento de la temperatura del mar puede desencadenar la liberación de grandes cantidades de dióxido de carbono, atrapado como hidruros en el fondo del océano. Ambos fenómenos pueden aumentar el efecto invernadero y el calentamiento global y podrían hacer que nuestro clima se convierta en el de Venus: hirviente y con lluvias de ácido sulfúrico, pero con una temperatura de 250 grados Celsius. La vida humana sería insostenible. Necesitamos ir más allá del Protocolo de Kioto y reducir las emisiones de carbono ahora mismo. Tenemos la tecnología para hacerlo. Solo necesitamos la voluntad política.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 690-692 | Added on Monday, June 24, 2019 10:09:25 PM

Bad software impedes our purpose and interferes with our happiness. Where once we felt productive, now we feel thwarted. Where once fast, now slow. Where once peaceful, now frustrated.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 693-694 | Added on Monday, June 24, 2019 10:09:51 PM

When the cost of doing work exceeds its value, our efforts feel wasted.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 862-864 | Added on Wednesday, June 26, 2019 1:55:02 AM

The problem with poorly designed small applications is that if they are successful, they grow up to be poorly designed big applications.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 883-884 | Added on Wednesday, June 26, 2019 1:58:52 AM

The purpose of design is to allow you to do design later, and its primary goal is to reduce the cost of change.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 961-962 | Added on Wednesday, June 26, 2019 2:06:21 AM

object-oriented software fails when the act of design is separated from the act of programming.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 1033-1036 | Added on Saturday, June 29, 2019 10:49:26 AM

If lack of a feature will force you out of business today, it doesn’t matter how much it will cost to deal with the code tomorrow; you must do the best you can in the time you have. Making this kind of design compromise is like borrowing time from the future and is known as taking on technical debt. This is a loan that will eventually need to be repaid, quite likely with interest.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 1523-1524 | Added on Saturday, June 29, 2019 11:16:15 AM

When everything in a class is related to its central purpose, the class is said to be highly cohesive or to have a single responsibility.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 1795-1796 | Added on Saturday, June 29, 2019 11:28:36 AM

you should hide data from yourself. Doing so protects the code from being affected by unexpected changes. Data very often has behavior that you don’t yet know about.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 1885-1886 | Added on Saturday, June 29, 2019 11:30:42 AM

Direct references into complicated structures are confusing, because they obscure what the data really is, and they are a maintenance nightmare, because every reference will need to be changed when the structure of the array changes.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 2113-2113 | Added on Saturday, June 29, 2019 11:37:48 AM

You do not have to know where you’re going to use good design practices to get there. Good practices reveal design.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 2743-2745 | Added on Thursday, July 4, 2019 12:30:04 AM

unjustified attachment to type. It is not the class of the object that’s important, it’s the message you plan to send to it.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 2853-2855 | Added on Thursday, July 4, 2019 12:33:17 AM

When working on an existing application, you may find yourself under severe constraints about how much you can actually change. If prevented from achieving perfection, your goals should switch to improving the overall situation by leaving the code better than you found it.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 3495-3496 | Added on Monday, July 8, 2019 12:57:02 AM

The classes in your application should depend on code that you own; use a wrapping method to isolate external dependencies.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 3603-3605 | Added on Monday, July 8, 2019 12:59:31 AM

Using a module here lets you define a separate and distinct object to which you can send the gear message (line 22) while simultaneously conveying the idea that you don’t expect to have instances of GearWrapper.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 3613-3615 | Added on Monday, July 8, 2019 1:00:32 AM

replacing positional arguments with keywords is perfect for cases where you are forced to depend on external interfaces that you cannot change. Do not allow these kinds of external dependencies to permeate your code; protect yourself by wrapping each in a method that is owned by your own application.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 3837-3838 | Added on Wednesday, July 10, 2019 12:18:09 AM

Depending on an abstraction is always safer than depending on a concretion because by its very nature, the abstraction is more stable.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 3845-3848 | Added on Wednesday, July 10, 2019 12:19:28 AM

A class that, if changed, will cause changes to ripple through the application will be under enormous pressure to never change. Ever. Under any circumstances whatsoever. Your application may be permanently handicapped by your reluctance to pay the price required to make a change to this class.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 3901-3904 | Added on Saturday, July 13, 2019 2:30:04 AM

Design, therefore, must be concerned with the messages that pass between objects. It deals not only with what objects know (their responsibilities) and who they know (their dependencies) but also with how they talk to one another.  The conversation between objects takes place using their interfaces;
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 3981-3982 | Added on Monday, July 15, 2019 12:16:59 AM

public methods should read like a description of responsibilities.  The public interface is a contract that articulates the responsibilities of your class.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 3995-3996 | Added on Monday, July 15, 2019 12:18:23 AM

The design goal, as always, is to retain maximum future flexibility while writing only enough code to meet today’s requirements. Good public interfaces reduce the cost of unanticipated change; bad public interfaces raise it.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4204-4205 | Added on Wednesday, July 17, 2019 12:41:24 AM

having a small public interface means that there are few methods for others to depend on.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4224-4226 | Added on Wednesday, July 17, 2019 12:42:53 AM

Objects that have a simple context are easy to use and easy to test; they expect few things from their surroundings. Objects that have a complicated context are hard to use and hard to test; they require complicated setup before they can do anything.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4375-4376 | Added on Friday, July 19, 2019 6:14:18 PM

The clarity of your interfaces reveals your design skills and reflects your self-discipline.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4380-4381 | Added on Friday, July 19, 2019 6:14:58 PM

Think about interfaces. Create them intentionally. It is your interfaces, more than all of your tests and any of your code, that define your application and determine its future.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4384-4386 | Added on Friday, July 19, 2019 6:15:22 PM

Your goal is to write code that works today, that can easily be reused, and that can be adapted for unexpected use in the future. Other people will invoke your methods; it is your obligation to communicate which ones are dependable.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4387-4394 | Added on Friday, July 19, 2019 6:15:59 PM

Methods in the public  interface should: Be explicitly identified as such. Be more about what than how. Have names that, insofar as you can anticipate, will not change. Prefer keyword arguments.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4452-4454 | Added on Friday, July 19, 2019 6:20:18 PM

Do your best to interact with other classes using only their public interfaces. Assume that the authors of those classes were just as intentional as you are now, and they are trying desperately, across time and space, to communicate which methods are dependable.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4464-4466 | Added on Friday, July 19, 2019 6:24:02 PM

you may find that you must depend on a private interface. This is a dangerous dependency that should be isolated
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4471-4472 | Added on Friday, July 19, 2019 6:24:35 PM

create public methods that allow senders to get what they want without knowing how your class implements its behavior.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4475-4476 | Added on Friday, July 19, 2019 6:26:26 PM

Even if the original author did not define a public interface, it is not too late to create one for yourself.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4487-4488 | Added on Friday, July 19, 2019 6:28:29 PM

Demeter restricts the set of objects to which a method may send messages; it prohibits routing a message to a third object via a second object of a different type.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4522-4525 | Added on Friday, July 19, 2019 6:31:51 PM

Even experienced designers argue about how firmly Demeter applies to message chains that return attributes. It may be cheapest, in your specific case, to reach through intermediate objects to retrieve distant attributes. Balance the likelihood and cost of change against the cost of removing the violation.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4526-4528 | Added on Friday, July 19, 2019 6:33:26 PM

Because the risk incurred by Demeter violations is low for stable attributes, this may be the most cost-efficient strategy. This tradeoff is permitted as long as you are not changing the value of the attribute you retrieve.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4552-4554 | Added on Friday, July 19, 2019 6:35:25 PM

One common way to remove train wrecks from code is to use delegation to avoid the dots. In object-oriented terms, to delegate a message is to pass it on to another object, often via a wrapper method. The wrapper method encapsulates, or hides, knowledge that would otherwise be embodied in the message chain.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4560-4561 | Added on Friday, July 19, 2019 6:43:45 PM

Using  delegation to hide tight coupling is not the same as decoupling the code.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 4590-4593 | Added on Friday, July 19, 2019 6:52:31 PM

The train wrecks of Demeter violations are clues that there are objects whose public interfaces are lacking. Listening to Demeter means paying attention to your point of view. If you shift to a message-based perspective, the messages you find will become public interfaces in the objects they lead you to discover. However, if you are bound by the shackles of existing domain objects, you’ll end up assembling their existing public interfaces into long message chains and thus will miss the opportunity to find and construct flexible public interfaces.
==========
Vue.js in Action (Erik Hanchett, Ben Listwon)
- Your Highlight on Location 823-825 | Added on Friday, July 19, 2019 7:00:29 PM

At the heart of every Vue application, no matter how big or small, is the root Vue instance, Vue instance for short.
==========
Vue.js in Action (Erik Hanchett, Ben Listwon)
- Your Highlight on Location 828-829 | Added on Friday, July 19, 2019 7:00:39 PM

The Vue constructor accepts a single JavaScript object, known as the options object,
==========
Vue.js in Action (Erik Hanchett, Ben Listwon)
- Your Highlight on Location 876-877 | Added on Friday, July 19, 2019 7:01:16 PM

If the CSS selector we provide resolves to more than one DOM element, Vue will mount the application to the first element that matches the selector.
==========
Vue.js in Action (Erik Hanchett, Ben Listwon)
- Your Highlight on Location 900-901 | Added on Friday, July 19, 2019 7:02:28 PM

[Vue warn]: Property or method "propertyname" is not defined . . . lets you know something wasn’t defined in the options object when the instance was created.
==========
Vue.js in Action (Erik Hanchett, Ben Listwon)
- Your Highlight on Location 1591-1592 | Added on Friday, July 19, 2019 11:24:27 PM

computed property It might help to think
==========
Vue.js in Action (Erik Hanchett, Ben Listwon)
- Your Highlight on Location 1592-1594 | Added on Friday, July 19, 2019 11:25:12 PM

think of the properties in the data object as representing data we’d store in a database and computed properties as dynamic values that are used primarily within the context of our view.
==========
Vue.js in Action (Erik Hanchett, Ben Listwon)
- Your Highlight on Location 2179-2180 | Added on Friday, July 19, 2019 11:47:25 PM

The v-once directive renders an element or component once only. On any additional re-renders, the element or component will be treated as static content and skipped.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 5498-5499 | Added on Wednesday, July 31, 2019 1:07:28 AM

Small, trustworthy self-contained objects with minimal context, clear interfaces, and injected dependencies are inherently reusable.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 5510-5513 | Added on Wednesday, July 31, 2019 1:07:52 AM

Inheritance is, at its core, a mechanism for automatic message delegation. It defines a forwarding path for not-understood messages. It creates relationships such that, if one object cannot respond to a received message, it delegates that message to another. You don’t have to write code to explicitly delegate the message; instead you define an inheritance relationship between two objects, and the forwarding happens automatically.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 6454-6455 | Added on Tuesday, August 6, 2019 12:43:59 AM

this push-everything-down-and-then-pull-some-things-up strategy is an important part of this refactoring. Many of the difficulties of inheritance are caused by a failure to rigorously separate the concrete from the abstract.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 6461-6463 | Added on Tuesday, August 6, 2019 12:45:01 AM

When deciding between refactoring strategies, indeed, when deciding between design strategies in general, it’s useful to ask the question, “What will happen if I’m wrong?”
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 6482-6484 | Added on Tuesday, August 6, 2019 12:47:15 AM

Every decision you make includes two costs: one to implement it and another to change it when you discover that you were wrong. Taking both costs into account when choosing among alternatives motivates you to make conservative choices that minimize the cost of change.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 6642-6643 | Added on Tuesday, August 6, 2019 12:51:19 AM

defining a basic structure in the superclass and sending messages to acquire subclass-specific contributions is known as the template method pattern.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 6860-6861 | Added on Tuesday, August 6, 2019 12:54:46 AM

Any class that uses the template method pattern must supply an implementation for every message it sends,
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 6944-6947 | Added on Tuesday, August 6, 2019 12:56:23 AM

Creating code that fails with reasonable error messages takes minor effort in the present but provides value forever. Each error message is a small thing, but small things accumulate to produce big effects, and it is this attention to detail that marks you as a serious programmer. Always document template method requirements by implementing matching methods that raise useful errors.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 7363-7365 | Added on Thursday, August 8, 2019 12:32:12 AM

When a subclass sends super, it’s effectively declaring that it knows the algorithm; it depends on this knowledge. If the algorithm changes, then the subclasses may break even if their own specializations are not otherwise affected.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 7367-7370 | Added on Thursday, August 8, 2019 12:34:51 AM

Instead of allowing subclasses to know the algorithm and requiring that they send super, superclasses can instead send hook messages, ones that exist solely to provide subclasses a place to contribute information by implementing matching methods. This strategy removes knowledge of the algorithm from the subclass and returns control to the superclass.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 8710-8710 | Added on Friday, August 9, 2019 1:47:01 AM

when a sending object checks the class of a receiving object to determine what message to send, you have overlooked a duck type.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 8717-8719 | Added on Friday, August 9, 2019 1:48:32 AM

All of the code in an abstract superclass should apply to every class that inherits it. Superclasses should not contain code that applies to some, but not all, subclasses. This restriction also applies to modules: The code in a module must apply to all who use it.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 8765-8767 | Added on Wednesday, August 14, 2019 12:58:08 AM

Avoid writing code that requires its inheritors to send super; instead use hook messages to allow subclasses to participate while absolving them of responsibility for knowing the abstract algorithm.
==========
Practical Object-Oriented Design: An Agile Primer Using Ruby, 2/e (Sandi Metz)
- Your Highlight on Location 10760-10763 | Added on Tuesday, September 17, 2019 12:33:51 AM

Aggregation is exactly like composition except that the contained object has an independent life. Universities have departments, which in turn have professors. If your application manages many universities and knows about thousands of professors, it’s quite reasonable to expect that although a department completely disappears when its university goes defunct, its professors continue to exist.
==========
Monolith to Microservices (Sam Newman)
- Your Highlight on Location 69-70 | Added on Monday, October 21, 2019 1:38:35 AM

They key is to ensure you’re only rewriting small pieces of functionality at a time, and shipping this reworked functionality to our customers regularly.
==========
Monolith to Microservices (Sam Newman)
- Your Highlight on Location 87-88 | Added on Monday, October 21, 2019 1:40:59 AM

The idea is that the old and the new can co-exist, giving the new system time to grow and potentially entirely replace the old system.
==========
Monolith to Microservices (Sam Newman)
- Your Highlight on Location 91-92 | Added on Monday, October 21, 2019 1:41:30 AM

we strive to not only take incremental steps towards our new application architecture, but we will also ensure that each step is easily reversible, reducing the risk of each incremental step.
==========
The Burning White: Book Five of Lightbringer (Weeks, Brent)
- Your Highlight on Location 3030-3031 | Added on Friday, October 25, 2019 12:21:17 AM

People call others ‘gifted’ when they don’t want to believe they’re worse at something because they’re not willing to put in the work excellence requires.
==========
The Burning White: Book Five of Lightbringer (Weeks, Brent)
- Your Highlight on Location 9663-9664 | Added on Saturday, November 2, 2019 6:26:10 PM

“Strength is a choice. Courage is a habit. Unfortunately, cowardice is, too.”
==========
The Burning White: Book Five of Lightbringer (Weeks, Brent)
- Your Highlight on Location 17461-17461 | Added on Sunday, November 10, 2019 5:21:36 AM

with the same kind of sea demon bone that made the tygre
==========
The Burning White: Book Five of Lightbringer (Weeks, Brent)
- Your Highlight on Location 18571-18573 | Added on Sunday, November 10, 2019 7:33:01 AM

We see others not as they are but as we see. We see ourselves not as we are but as we see—and as we are seen, for we each cast our light on each other, too. Surrounded by those who cast only brutal light, we see some truth, and sometimes necessary truth, but a lie if we think it all the truth.
==========
The Rage of Dragons: The Burning, Book One (Winter, Evan)
- Your Highlight on page 175 | Location 2367-2368 | Added on Friday, November 22, 2019 7:54:14 PM

Life is nothing more than moments in time. To achieve greatness, you have to give up those moments. You have to give your life to your goal.”
==========
The Rage of Dragons: The Burning, Book One (Winter, Evan)
- Your Highlight on page 181 | Location 2446-2448 | Added on Friday, November 22, 2019 8:01:56 PM

Improvement can only come through intentioned effort. Every day must be hard for you. The days without difficulty are the days you do not improve. The days you do not improve are the days the men behind you close the distance. It’s then you give your enemies hope. Hope that, when they meet you in battle, they have done enough to finish you.”
==========
La muerte del comendador (Libro 1) (Volumen independiente) (Spanish Edition) (Murakami, Haruki)
- Your Highlight on Location 1027-1028 | Added on Friday, December 6, 2019 2:58:27 AM

De lejos, la mayor parte de las cosas se ven bonitas.
==========
La muerte del comendador (Libro 2) (Volumen independiente) (Spanish Edition) (Murakami, Haruki)
- Your Highlight on Location 3418-3419 | Added on Sunday, January 19, 2020 8:25:36 PM

No me gustan los cedés. Brillan demasiado. Están bien para ahuyentar a los cuervos colgados del alero de un tejado, pero no para escuchar música.
==========
La muerte del comendador (Libro 2) (Volumen independiente) (Spanish Edition) (Murakami, Haruki)
- Your Highlight on Location 3537-3539 | Added on Sunday, January 19, 2020 8:31:10 PM

no me acostumbraba a ver a la gente hacer fotos con los teléfonos móviles. Menos aún, al hecho de que llamasen por teléfono con una cámara de fotos.
==========
Padre rico. Padre pobre (Nueva edición actualizada). (Spanish Edition) (Kiyosaki, Robert T.)
- Your Highlight on Location 627-627 | Added on Thursday, March 5, 2020 8:49:07 PM

Sólo memorizamos fechas y nombres, pero nunca aprendemos la lección.
==========
El Pozo de la Ascensión (Nacidos de la bruma [Mistborn] 2) (Spanish Edition) (Sanderson, Brandon)
- Your Highlight on Location 9368-9371 | Added on Wednesday, April 1, 2020 8:58:15 PM

A primera vista, la llave y la cerradura en la que encaja pueden parecer muy distintas —dijo Sazed—. Diferentes en su forma, diferentes en su función, diferentes en su diseño. El hombre que las mira sin conocer su verdadera naturaleza puede pensar que son opuestas, pues una sirve para abrir y la otra para mantener cerrado. Sin embargo, examinándolas con atención, se ve que sin una la otra no sirve para nada. El hombre sabio ve que la cerradura y la llave fueron creadas para el mismo propósito.
==========
El Héroe de las Eras (Nacidos de la bruma [Mistborn] 3) (Spanish Edition) (Sanderson, Brandon)
- Your Highlight on Location 1159-1160 | Added on Tuesday, April 7, 2020 2:00:11 AM

naturaleza del mundo es tal que, cuando creamos algo, a menudo destruimos otra cosa en el proceso.
==========
El Héroe de las Eras (Nacidos de la bruma [Mistborn] 3) (Spanish Edition) (Sanderson, Brandon)
- Your Highlight on Location 7240-7242 | Added on Thursday, April 23, 2020 3:09:00 AM

Un hombre es aquello por lo que siente pasión. He descubierto que, si renuncias a lo que más quieres por lo que piensas que deberías querer más, acabarás sintiéndote inútil.
==========
El Héroe de las Eras (Nacidos de la bruma [Mistborn] 3) (Spanish Edition) (Sanderson, Brandon)
- Your Highlight on Location 7615-7616 | Added on Thursday, April 23, 2020 12:22:39 PM

No obstante, demasiado de cualquier cosa es letal. El agua es necesaria para la supervivencia, pero demasiada ahoga.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 130-131 | Added on Thursday, April 30, 2020 12:35:59 AM

Sustained exhaustion is not a badge of honor, it’s a mark of stupidity.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 195-197 | Added on Thursday, April 30, 2020 12:42:21 AM

But when you think of the company as a product, you ask different questions: Do people who work here know how to use the company? Is it simple? Complex? Is it obvious how it works? What’s fast about it? What’s slow about it? Are there bugs? What’s broken that we can fix quickly and what’s going to take a long time?
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 197-198 | Added on Thursday, April 30, 2020 12:42:38 AM

A company is like software. It has to be usable, it has to be useful.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 215-217 | Added on Thursday, April 30, 2020 12:45:13 AM

Running a calm company is, unfortunately, not the default way to run a company these days. You have to work against your instincts for a while. You have to put toxic industry norms aside. You have to recognize that “It’s crazy at work” isn’t right.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 243-244 | Added on Thursday, April 30, 2020 12:48:20 AM

You can dare to be completely ordinary every now and then.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 269-269 | Added on Thursday, April 30, 2020 12:51:19 AM

“Comparison is the death of joy.”
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 299-299 | Added on Thursday, April 30, 2020 12:54:11 AM

Goals are fake. Nearly all of them are artificial targets set for the sake of setting targets.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 333-334 | Added on Thursday, April 30, 2020 1:57:46 AM

worry less (or not at all!) about changing the world. Chances are, you won’t, and if you do, it’s not going to be because you said you would.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 391-392 | Added on Thursday, April 30, 2020 2:03:43 AM

If you can’t fit everything you want to do within 40 hours per week, you need to get better at picking what to do, not work longer hours.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 458-460 | Added on Friday, May 1, 2020 11:54:52 AM

A great work ethic isn’t about working whenever you’re called upon. It’s about doing what you say you’re going to do, putting in a fair day’s work, respecting the work, respecting the customer, respecting coworkers, not wasting time, not creating unnecessary work for other people, and not being a bottleneck.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 469-470 | Added on Friday, May 1, 2020 11:57:54 AM

Ask people where they go when they really need to get something done. One answer you’ll rarely hear: the office.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 543-545 | Added on Saturday, May 2, 2020 11:03:02 PM

“But how do you know if someone’s working if you can’t see them?” Same answer as this question: “How do you know if someone’s working if you can see them?” You don’t. The only way to know if work is getting done is by looking at the actual work.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 709-710 | Added on Monday, May 4, 2020 1:07:39 AM

the further away you are from the fruit, the lower it looks. Once you get up close, you see it’s quite a bit higher than you thought.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 1032-1034 | Added on Tuesday, May 5, 2020 1:35:20 AM

All chat all the time conditions you to believe everything’s worth discussing quickly right now, except that hardly anything is. Almost everything can and should wait until someone has had a chance to think it through and properly write it up.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 1071-1072 | Added on Tuesday, May 5, 2020 1:36:19 AM

It’s when you try to fix both scope and time that you have a recipe for dread, overwork, and exhaustion.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 1122-1126 | Added on Tuesday, May 5, 2020 1:41:14 AM

Normal comes on quick. First it starts as an outlier. Some behavior you don’t love, but tolerate. Then someone else follows suit, but either you miss it or you let it slide. Then people pile on—repeating what they’ve seen because no one stepped in to course correct. Then it’s too late. It’s become the culture. The new normal.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 1134-1136 | Added on Tuesday, May 5, 2020 1:42:21 AM

Culture is what culture does. Culture isn’t what you intend it to be. It’s not what you hope or aspire for it to be. It’s what you do. So do better.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 1168-1169 | Added on Tuesday, May 5, 2020 1:45:37 AM

big-bang releases bundle the risk from every component, so if one thing falls behind, the whole thing can get held up. Which it always does.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 1189-1195 | Added on Tuesday, May 5, 2020 1:51:08 AM

Jeff Bezos put it well in his 2017 letter to shareholders: I disagree and commit all the time. We recently greenlit a particular Amazon Studios original. I told the team my view: debatable whether it would be interesting enough, complicated to produce, the business terms aren’t that good, and we have lots of other opportunities. They had a completely different opinion and wanted to go ahead. I wrote back right away with “I disagree and commit and hope it becomes the most watched thing we’ve ever made.” Consider how much slower this decision cycle would have been if the team had actually had to convince me rather than simply get my commitment.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 1342-1343 | Added on Tuesday, May 5, 2020 3:29:24 AM

The only way to get more done is to have less to do.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 1345-1347 | Added on Tuesday, May 5, 2020 3:30:02 AM

time isn’t something that can be managed. Time is time—it rolls along at the same pace regardless of how you try to wrestle with it. What you choose to spend it on is the only thing you have control over.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 1375-1375 | Added on Tuesday, May 5, 2020 3:31:55 AM

You can do big things with small teams, but it’s a whole hell of a lot harder to do small things with big teams.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 1495-1497 | Added on Tuesday, May 5, 2020 7:55:34 PM

If you want to know the truth about what you’ve built, you have to ship it. You can test, you can brainstorm, you can argue, you can survey, but only shipping will tell you whether you’re going to sink or swim.
==========
It Doesn’t Have to Be Crazy at Work (Fried, Jason)
- Your Highlight on Location 1617-1619 | Added on Tuesday, May 5, 2020 9:15:27 PM

When you deal with people who have trouble, you can either choose to take the token that says “It’s no big deal” or the token that says “It’s the end of the world.” Whichever token you pick, they’ll take the other.
==========
Monolith to Microservices (Sam Newman)
- Your Highlight on Location 350-353 | Added on Wednesday, May 6, 2020 1:08:34 AM

Independent deployability is the idea that we can make a change to a microservice and deploy it into a production environment without having to utilize any other services. More importantly, it’s not just that we can do this; it’s that this is actually how you manage deployments in your system. It’s a discipline you practice for the bulk of your releases.
==========
Monolith to Microservices (Sam Newman)
- Your Highlight on Location 397-399 | Added on Wednesday, May 6, 2020 1:22:10 AM

Our aspirations around our software have changed. We now group people in poly-skilled teams, to reduce hand-offs and silos. We want to ship software much more quickly than ever before. That is driving us to make different choices about how we organize our teams, and therefore in terms of how we break our systems apart.
==========
Monolith to Microservices (Sam Newman)
- Your Highlight on Location 403-404 | Added on Wednesday, May 6, 2020 1:22:46 AM

If we want to make it easier to make changes, instead we need to change how we group code—we choose cohesion of business functionality, rather than technology.
==========
Monolith to Microservices (Sam Newman)
- Your Highlight on Location 476-478 | Added on Wednesday, May 6, 2020 1:31:40 AM

If we want an architecture that makes it easier for us to more rapidly deploy new features, then leaving the UI as a monolithic blob can be a big mistake. We can, and should, look at breaking apart our user interfaces too,
==========
Monolith to Microservices (Sam Newman)
- Your Highlight on Location 484-487 | Added on Wednesday, May 6, 2020 1:33:07 AM

Working out how to properly evolve and manage a microservice architecture involves tackling a multitude of challenges related to distributed systems—challenges you may not have faced before. I think it’s much more useful to get your head around these issues as you encounter them, making use of a technology stack you are familiar with, and then consider whether changing your existing technology may help address those problems as you find them.
==========
Monolith to Microservices (Sam Newman)
- Your Highlight on Location 669-670 | Added on Wednesday, May 6, 2020 12:49:17 PM

we’re optimizing our microservice architecture around ease of making changes in business functionality—so we want the functionality grouped in such a way that we can make changes in as few places as possible.
==========
Monolith to Microservices (Sam Newman)
- Your Highlight on Location 668-668 | Added on Wednesday, May 6, 2020 12:51:09 PM

cohesion is this: “the code that changes together, stays together.”
==========
Monolith to Microservices (Sam Newman)
- Your Highlight on Location 689-690 | Added on Wednesday, May 6, 2020 12:52:23 PM

We want the module boundary to be stable, and it should hide those parts of the module implementation that we expect to change more often. The idea is that internal changes can be made safely as long as module compatibility is maintained.
==========
Monolith to Microservices (Sam Newman)
- Your Highlight on Location 733-735 | Added on Wednesday, May 6, 2020 12:58:37 PM

use “outside-in” thinking when it comes to defining a service interface—drive the service interface by thinking of things from the point of the service consumers first, and then work out how to implement that service contract.
==========
